generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id
  name           String
  email          String
  emailVerified  Boolean          @default(false)
  image          String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now()) @updatedAt
  sessions       Session[]
  accounts       Account[]
  courses        Course[]
  enrollments    Enrollment[]
  lessonProgress LessonProgress[]

  stripeCustomerId String? @unique

  // Admin plugin fields
  role       String?   @default("user")
  banned     Boolean?  @default(false)
  banReason  String?
  banExpires DateTime?

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Admin plugin field for impersonation
  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Course {
  id    String @id @default(cuid())
  title String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  description      String
  fileKey          String
  price            Int
  duration         Int
  level            CourseLevel  @default(BEGINNER)
  category         String
  smallDescription String
  slug             String       @unique
  status           CourseStatus @default(DRAFT)

  userId String
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  chapters    Chapter[]
  enrollments Enrollment[]

  stripePriceId String @unique

  @@map("course")
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Chapter {
  id       String @id @default(cuid())
  title    String
  position Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String

  lessons Lesson[]
}

model Lesson {
  id           String  @id @default(cuid())
  title        String
  description  String?
  thumbnailKey String?
  videoKey     String?

  position Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId String

  lessonProgress LessonProgress[]
}

model Enrollment {
  id        String           @id @default(cuid())
  status    EnrollmentStatus @default(PENDING)
  amount    Int
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  Course    Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String
  User      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@unique([userId, courseId])
}

enum EnrollmentStatus {
  PENDING
  ACTIVE
  CANCELLED
  FAILED
}

model LessonProgress {
  id String @id @default(cuid())

  completed Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  Lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId  String

  @@unique([userId, lessonId])
}
